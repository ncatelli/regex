Regex ::= StartOfStringAnchor? Expression

Expression ::= Subexpression ("|" Expression)?

/* Anything that can be on one side of the alternation. */
Subexpression ::= SubexpressionItem+
SubexpressionItem
	::= Match
	  | Group
	  | Anchor
	  | Backreference
	

/* Grouping Constructs 
------------------------------------------------------------------*/

Group ::= "(" GroupNonCapturingModifier? Expression ")" Quantifier?
GroupNonCapturingModifier ::= "?:"

/* Match
------------------------------------------------------------------*/

Match ::= MatchItem Quantifier?

MatchItem
	::= MatchAnyCharacter
	  | MatchCharacterClass
	  | MatchCharacter

MatchAnyCharacter ::= "."

MatchCharacterClass
	::= CharacterGroup
	  | CharacterClass
	  | CharacterClassFromUnicodeCategory

MatchCharacter ::= Char

/* Character Classes
------------------------------------------------------------------*/

CharacterGroup ::= "[" CharacterGroupNegativeModifier? CharacterGroupItem+ "]"

CharacterGroupNegativeModifier ::= "^"
CharacterGroupItem
	::= CharacterClass
	  | CharacterClassFromUnicodeCategory
	  | CharacterRange
	  | Char /* excluding ] */

CharacterClass
	::= CharacterClassAnyWord
	  | CharacterClassAnyWordInverted
	  | CharacterClassAnyDecimalDigit
	  | CharacterClassAnyDecimalDigitInverted

CharacterClassAnyWord ::= "\w"
CharacterClassAnyWordInverted ::= "\W"
CharacterClassAnyDecimalDigit ::= "\d"
CharacterClassAnyDecimalDigitInverted ::= "\D"

CharacterClassFromUnicodeCategory ::= "\p{" UnicodeCategoryName "}"
UnicodeCategoryName 
	::= "L" | "Letter" 
	  | "Ll" | "Lowercase_Letter"
	  | "Lu" | "Uppercase_Letter"
	  | "Lt" | "Titlecase_Letter"
	  | "L&" | "Cased_Letter"
	  | "Lm" | "Modified_Letter" 
	  | "Lo" | "Other_Letter"
	  | "M" | "Mark"
	  | "Mn" | "Non_Spacing_Mark"
	  | "Mc" | "Spacing_Combining_Mark"
	  | "Me" | "Enclosing_Mark"
	  | "Z" | "Separator"
	  | "Zs" | "Space_Separator"
	  | "Zl" | "Line_Separator"
	  | "Zp" | "Paragraph_Separator"
	  | "S" | "Symbol"
	  | "Sm" | "Math_Symbol"
	  | "Sc" | "Currency_Symbol"
	  | "Sk" | "Modifier_Symbol"
	  | "So" | "Other_Symbol"
	  | "N" | "Number"
	  | "Nd" | "Decimal_Digit_Number"
	  | "Nl" | "Letter_Number"
	  | "No" | "Other_Number"
	  | "P" | "Punctuation"
	  | "Pd" | "Dash_Punctuation"
	  | "Ps" | "Open Punctuation"
	  | "Pe" | "Close_Punctuation"
	  | "Pi" | "Initial_Punctuation"
	  | "Pf" | "Final_Punctuation"
	  | "Pc" | "Connector_Punctuation"
	  | "Po" | "Other_Punctuation"
	  | "C" | "Other"
	  | "Cc" | "Control"
	  | "Cf" | "Format"
	  | "Co" | "Private_Use"
	  | "Cs" | "Surrogate"
	  | "Cn" | "Unassigned"



CharacterRange ::= Char "-" Char


/* Quantifiers 
------------------------------------------------------------------*/

Quantifier ::= QuantifierType LazyModifier?
QuantifierType
	::= ZeroOrMoreQuantifier
	  | OneOrMoreQuantifier
	  | ZeroOrOneQuantifier
	  | RangeQuantifier

LazyModifier ::= "?"

ZeroOrMoreQuantifier ::= "*"
OneOrMoreQuantifier ::= "+"
ZeroOrOneQuantifier ::= "?"

RangeQuantifier ::= "{" RangeQuantifierLowerBound ( "," RangeQuantifierUpperBound? )? "}"
RangeQuantifierLowerBound ::= Integer
RangeQuantifierUpperBound ::= Integer

/* Backreferences
------------------------------------------------------------------*/

Backreference ::= "\" Integer

/* Anchors
------------------------------------------------------------------*/

StartOfStringAnchor ::= "^"

Anchor
	::= AnchorWordBoundary
	  | AnchorNonWordBoundary
	  | AnchorStartOfStringOnly
	  | AnchorEndOfStringOnlyNotNewline
	  | AnchorEndOfStringOnly
	  | AnchorPreviousMatchEnd
	  | AnchorEndOfString

AnchorWordBoundary ::= "\b"
AnchorNonWordBoundary ::= "\B"
AnchorStartOfStringOnly ::= "\A"
AnchorEndOfStringOnlyNotNewline ::= "\z"
AnchorEndOfStringOnly ::= "\Z"
AnchorPreviousMatchEnd ::= "\G"
AnchorEndOfString ::= "$"

/* Misc
------------------------------------------------------------------*/

Integer ::= [0-9]+
Letters ::= [a-zA-Z]+
Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
